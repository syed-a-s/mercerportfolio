{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "## Base 64 Encoding Assignment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
    "# items to load\n",
    "def binary8bit(n):\n",
    "    ans=format(n,'b').zfill(8)\n",
    "    return(ans)\n",
    "\n",
    "# Use for encoding from integers to letters via ASCII codes\n",
    "alpha={i:chr(65+i) for i in range(26)}\n",
    "beta={i+26:chr(97+i) for i in range(26)}\n",
    "gamma={i+52:chr(48+i) for i in range(10)}\n",
    "delta={62:'+',63:'/'}\n",
    "alpha.update(beta)\n",
    "alpha.update(gamma)\n",
    "alpha.update(delta)\n",
    "def text(t):\n",
    "    return(alpha[t])\n",
    "\n",
    "# Convert original message to ASCII base 10\n",
    "def ToAscii(message):\n",
    "    ans = map(ord,message)\n",
    "    return ans\n",
    "\n",
    "# Convert ASCII to binary bits\n",
    "def AsciiToBin(listAscii):\n",
    "    binaryAscii = ''\n",
    "    for x in listAscii:\n",
    "        binaryAscii += binary8bit(x)\n",
    "    return binaryAscii\n",
    "\n",
    "# Seperate binary string into chunks of six into a list\n",
    "def BinaryListSix(binaryOfAscii):\n",
    "    binChunks = []\n",
    "    n = 6\n",
    "    for i in range(0, len(binaryOfAscii), n):\n",
    "        binChunks.append(binaryOfAscii[i:i+n])\n",
    "    return binChunks\n",
    "\n",
    "# Convert binary to decimal\n",
    "def BinToDec(binChunks):\n",
    "    integers = []\n",
    "    for x in binChunks:\n",
    "        integers.append(int(x,2))\n",
    "    return integers\n",
    "\n",
    "# Convert Integer to Letter\n",
    "def IntToLetter(binChunks):\n",
    "    encodedMsg = ''\n",
    "    # Convert binary to int\n",
    "    integers = BinToDec(binChunks)\n",
    "    # Encode message\n",
    "    for x in integers:\n",
    "        encodedMsg += text(x)\n",
    "    return encodedMsg\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Message before encoding :  DiscreteMathematicsIsFun\n",
      "Message after encoding :  RGlzY3JldGVNYXRoZW1hdGljc0lzRnVu\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "b'DiscreteMathematicsIsFun'"
      ]
     },
     "execution_count": 2,
     "metadata": {
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import base64\n",
    "\n",
    "msg = 'DiscreteMathematicsIsFun'\n",
    "print(\"Message before encoding : \", msg)\n",
    "listAscii = list(ToAscii(msg))\n",
    "binaryOfAscii = AsciiToBin(listAscii)\n",
    "binChunks = BinaryListSix(binaryOfAscii)\n",
    "msg = IntToLetter(binChunks) \n",
    "print(\"Message after encoding : \", msg)\n",
    "\n",
    "base64.b64decode(msg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "SageMath 9.4",
   "language": "sagemath",
   "metadata": {
    "cocalc": {
     "description": "Open-source mathematical software system",
     "priority": 10,
     "url": "https://www.sagemath.org/"
    }
   },
   "name": "sage-9.4",
   "resource_dir": "/ext/jupyter/kernels/sage-9.4"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}