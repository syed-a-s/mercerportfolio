{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-b63b7d5a-eaf4-4026-883f-9122edb6a539.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"e3b47b","input":"","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"d3294f","input":"# Converts a string into ascii value shifted left by 97\ndef StringToInteger(x):\n    return(ord(x)-97)\n\n# Returns a digraph of letters from a ascii message list\ndef MakeLetterPairs(msgList):\n    letterPairs = []\n    for k in range (0, len(msgList)-1, 2):\n        letterPairs.append([msgList[k], msgList[k+1]])\n    return letterPairs\n\n# Converts and returns a list of base 26^2 ints from a digraph\ndef ToBase26Sqr(digraphList):\n    base26SqrIntList = []\n    for a, b in digraphList:\n        base26SqrIntList.append(a*26 + b)\n    return base26SqrIntList\n\n# Ciphers an int with base 26^2\ndef AffineCipher(p):\n    return ((15 * p + 3) % (26 * 26))\n\n# Decodes a cipher that has been ciphered with base 26^2\ndef AffineCipherDecode(c):\n    return ((631*(c-3)) % (26 * 26))\n\n# Dividing by 26 and mod 26\ndef dummy(step1):\n    letterPairs = []\n    for k in range(0, len(step1) - 1, 2):\n        letterPairs.append([int(step1[k] / 26), int(step1[k+1] % 26)])\n    return letterPairs\n\ndef dummy1(step1):\n    letterPairs = []\n    for k in range(0, len(step1) - 1, 2):\n        letterPairs.append([int(step1[k] * 26), int(step1[k+1] / 26)])\n    return letterPairs\n\n# Converts ascii value into character. 97 added to cancel left shift  \ndef IntegerToString(x):\n    return(chr(x+97))\n\n# Decodes an encoded string with base 26^2\ndef DecodeMsg(msg):\n    msgList = list(map(StringToInteger, msg))\n    letterPairs = MakeLetterPairs(msgList)\n    base26SqrIntList = ToBase26Sqr(letterPairs)\n    step1 = list(map(AffineCipherDecode, base26SqrIntList))\n    step2 = dummy(step1)\n    return DigraphToString(step2)\n\n# Encode a given string with base 26^2\ndef EncodeMsg(msg):\n    msgList = list(map(StringToInteger, msg))\n    letterPairs = MakeLetterPairs(msgList)\n    base26SqrIntList = ToBase26Sqr(letterPairs)\n    step1 = list(map(AffineCipher, base26SqrIntList))\n    step2 = dummy(step1)\n    return DigraphToString(step2)\n\n# Returns a string from a list of digraphs\ndef DigraphToString(digraph):\n    s = \"\"\n    for a,b in digraph:\n        s += IntegerToString(a) + IntegerToString(b)\n    return(s)","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"7109af","input":"hello = [[7,4], [11,11], [14,23]]\nDigraphToString(hello)\n\nidk = [ [8, 3], [14, 13], [19, 10], [13, 14], [22, 23] ]\nDigraphToString(idk)\n","output":{"0":{"data":{"text/plain":"'idontknowx'"},"exec_count":3,"output_type":"execute_result"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"73104c","input":"# Test Case\nmsg = \"hblcdlyddtithqanhbfxryfardkcryxn\"\nmsg = DecodeMsg(msg)\nprint(msg)\n\n# My example case\nmsg1 = \"itiswhatitis\"\nmsg1 = EncodeMsg(msg1)\nprint(msg1)\nmsg1 = DecodeMsg(msg1)\nprint(msg1)\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"athatiasakefptes\nbnwcbn\npt\n"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"9e75cc","input":"msg = \"foodisgood\"\n# encode\nmsg = EncodeMsg(msg)\nprint(msg)\n#decode\nmsg = DecodeMsg(msg)\nprint(msg)\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"fwaf\nco\n"}},"pos":3,"type":"cell"}
{"id":0,"time":1639260785647,"type":"user"}
{"last_load":1639260786452,"type":"file"}