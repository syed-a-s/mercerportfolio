{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-547a7fff-fbf1-4491-938d-4d9572b8a651.json","kernel":"sage-9.4","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"4ac2a3","input":"","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"298937","input":"lcm(18, 1)\nxgcd(25, 36)\nz = pow(121, 13)\nx = (19)*(13)\n(pow(121, 13) % x)","output":{"0":{"data":{"text/plain":"121"},"exec_count":18,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"39f689","input":"def StringToInt(x):\n    return(ord(x)-97)","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"bf7f51","input":"def IntToString(c):\n    return(chr(c+97))","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"16df45","input":"# basic step 1\np = 13\nq = 19\nb = lcm((p-1), (q-1))\nn = p * q # public\ne = 71 # public\nGCDeb,u,v = xgcd(e,b)\nprint(xgcd(e,b))\n\n# if u is neg, add b until it is positive\nu = u + b\nd = u # private\n\n# basic step 2\nmessage = \"hello\"\nplaintext = list(map(StringToInt, message))","output":{"0":{"name":"stdout","output_type":"stream","text":"(1, -1, 2)\n"}},"pos":6,"type":"cell"}
{"cell_type":"markdown","id":"12564b","input":"","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"9038cb","input":"## Your Computations","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"a45407","input":"\n# RSA Secret-Sharing Activity\n\nIn this activity, groups of students will set up the RSA keys and practice encoding and decoding messages between groups.\n\n** Be sure your Kernel for this activity is set to **SageMath 9.4**.\n\n### Step 1: Setup\n\n1.   Pick two prime numbers, $p$ and $q$. \n- Keep these secret: $p =$ \\_\\_\\_\\_\\_ $q =$ \\_\\_\\_\\_\\_.\n- Try `random_prime(2^50,lbound=100)` if you need help choosing a prime.\n2.   Find the number $b = \\text{lcm} ((p-1)\\cdot(q-1))$.\n- $b =$ \\_\\_\\_\\_\\_\\_\\_\\_\\_. Keep b secret, too.\n3.   Find the number $n = p\\cdot q$.\n- $n =$ \\_\\_\\_\\_\\_\\_\\_\\_\\_. You will want to\n    publicize $n$.\n4.   Now, pick a public-key exponent $e$, such that $e$ and $n$ are relatively prime.\n- $e =$ \\_\\_\\_\\_\\_\\_\\_\\_\\_.  You will want to publicize $e$.\n5.   Finally, find your secret private-key exponent $d$. To do this, find\n    the number $d$ such that $e\\cdot d\\, (\\text{mod } b) = 1$.\n  - Here we need to do the extended Euclidean algorithm to find integers $u,v$ so that $1=e\\cdot u + b\\cdot v$.\n  - We know how to do this by hand, but SageMath can do it using the `xgcd` command.\n  - The syntax is `xgcd(e,b)` and this will return a triple `(gcd(e,b),u,v)` where $$\\text{gcd}(e,b)=e\\cdot u + b\\cdot v.$$  \n  - Remember that if $u$ is negative, just add $b$ until you get a positive value.  This will be your private key $d$.\n  - $d =$ \\_\\_\\_\\_\\_\\_\\_\\_\\_. Do NOT tell anyone $d$.\n\n****\n\n### Step 2: Secret sharing\n\n1.   Find another team with whom you want to exchange messages, and tell them your modulus $n$ and your public-key exponent $e$. They should also tell you their modulus (call it $n_2$) and their public-key exponent (call it $e_2$). \n- Their key: $n_2$ = \\_\\_\\_\\_\\_\\_\\_, $e_2$ = \\_\\_\\_\\_\\_\\_\\_\\_.\n2.   To send a message, convert it to numbers using the `StringToInt` command along with the `map` and `list` commands.\n\n```\nmessage='hello'\nplaintext=list(map(StringToInt,message))\n```\n\n3. Your message: \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n- Its numerical equivalent: \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n4. For each number $m$ in your `plaintext` variable, calculate $m^{e_2} (\\text{mod } n_2)$. Write a function to do this encoding.  Then, you can map it to the list.  Call the result `ciphertext`.  This is your encoded message.  Note: _You are encoding the message using the other team's public key_.\n```\ndef encode(m,e2,n2):\n  your code here...\n```\n5. Your encrypted message: \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n6.   Then, give your encrypted message to the team from whom you got $n_2,e_2$. They should give you a sequence of numbers as well.\n- Their encrypted message:\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n7.   Now, to decrypt their message, use your secret exponent $d$. For each\n    number $c$ in their message, compute $c^{d} (\\text{mod } n)$. Write a function to do this decoding.  Then, you can map it to the list.  _Note that you are decoding the message using your private key_.\n    This will reveal the numbers in their original message!\n```\ndef decode(c,d,n):\n  your code here...\n```\n8. Use `IntToString` to convert these back to letters to get their message to you.\n9. Their message: \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n\n","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"defed4","input":"","pos":0,"type":"cell"}
{"id":0,"time":1639541116305,"type":"user"}
{"last_load":1639541087563,"type":"file"}