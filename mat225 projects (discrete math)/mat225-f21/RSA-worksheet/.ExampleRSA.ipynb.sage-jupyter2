{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-039c4e91-bbdd-434e-8144-72adac52f700.json","kernel":"sage-9.4","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1638904773014,"exec_count":5,"id":"32ba43","input":"p=random_prime(2**50,lbound=25)\nq=random_prime(2**50,lbound=25)\np,q","kernel":"sage-9.4","output":{"0":{"data":{"text/plain":"(746495785689751, 1048912854919477)"},"exec_count":5}},"pos":1,"start":1638904773003,"state":"done","type":"cell"}
{"cell_type":"code","end":1638904773723,"exec_count":6,"id":"0c9346","input":"b=lcm(p-1,q-1)\nb","kernel":"sage-9.4","output":{"0":{"data":{"text/plain":"130501504292198831681561428500"},"exec_count":6}},"pos":2,"start":1638904773711,"state":"done","type":"cell"}
{"cell_type":"code","end":1638904774400,"exec_count":7,"id":"70d9f9","input":"n=p*q\nn","kernel":"sage-9.4","output":{"0":{"data":{"text/plain":"783009025753194785498009180227"},"exec_count":7}},"pos":3,"start":1638904774387,"state":"done","type":"cell"}
{"cell_type":"code","end":1638904867914,"exec_count":20,"id":"4e4c97","input":"u=2\nwhile (u>1):\n    e=randint(b,n)\n    (u,v,w)=xgcd(e,b)\nu,v,w","kernel":"sage-9.4","output":{"0":{"data":{"text/plain":"(1, 60576465043168544174226379199, -180040800179573019269711382979)"},"exec_count":20}},"pos":5,"start":1638904867904,"state":"done","type":"cell"}
{"cell_type":"code","end":1638904870487,"exec_count":21,"id":"ebef36","input":"d=v if v>0 else v+b\nd","kernel":"sage-9.4","output":{"0":{"data":{"text/plain":"60576465043168544174226379199"},"exec_count":21}},"pos":6,"start":1638904870480,"state":"done","type":"cell"}
{"cell_type":"code","end":1638904872114,"exec_count":22,"id":"c25432","input":"(e*d) % b","kernel":"sage-9.4","output":{"0":{"data":{"text/plain":"1"},"exec_count":22}},"pos":7,"start":1638904872089,"state":"done","type":"cell"}
{"cell_type":"code","end":1638904873871,"exec_count":24,"id":"75e28c","input":"def StringToInt(x):\n    return(ord(x)-97)","kernel":"sage-9.4","pos":9,"start":1638904873865,"state":"done","type":"cell"}
{"cell_type":"code","end":1638904911330,"exec_count":33,"id":"6e6792","input":"message='It is during our darkest moments that we must focus to see the light. Aristotle'\nmessage=message.lower()\nmessage=message.replace(' ','')\nmessage=message.replace('.','')\nmessage","kernel":"sage-9.4","output":{"0":{"data":{"text/plain":"'itisduringourdarkestmomentsthatwemustfocustoseethelightaristotle'"},"exec_count":33}},"pos":8,"start":1638904911316,"state":"done","type":"cell"}
{"cell_type":"code","end":1638904917316,"exec_count":35,"id":"36753f","input":"def encode(m):\n    ans=pow(m,e,n)\n    return(ans)","kernel":"sage-9.4","pos":12,"start":1638904917308,"state":"done","type":"cell"}
{"cell_type":"code","end":1638904919862,"exec_count":37,"id":"4a0d07","input":"def decode(c):\n    ans=pow(c,d,n)\n    return(ans)","kernel":"sage-9.4","pos":14,"start":1638904919856,"state":"done","type":"cell"}
{"cell_type":"code","end":1638904969253,"exec_count":44,"id":"1e94a0","input":"c=list(map(encode,m))\nprint(c)","kernel":"sage-9.4","output":{"0":{"name":"stdout","text":"[76157294846705656876769893903, 425285399279902727684391336729, 76157294846705656876769893903, 599464025821904477967452081023, 77011211377968661186629078213, 776097424010530085948773103593, 364474240010461892034904021484, 76157294846705656876769893903, 781316043162799364267411242989, 32164984922050979883061765621, 360276963426448176780588457683, 776097424010530085948773103593, 364474240010461892034904021484, 77011211377968661186629078213, 0, 364474240010461892034904021484, 271658198402654070048326250973, 781514314305620552032662862853, 599464025821904477967452081023, 425285399279902727684391336729, 504827719908776680326008328201, 360276963426448176780588457683, 504827719908776680326008328201, 781514314305620552032662862853, 781316043162799364267411242989, 425285399279902727684391336729, 599464025821904477967452081023, 425285399279902727684391336729, 144511189233912560332097951278, 0, 425285399279902727684391336729, 544681056126936719947976966986, 781514314305620552032662862853, 504827719908776680326008328201, 776097424010530085948773103593, 599464025821904477967452081023, 425285399279902727684391336729, 402903420580847027911094871628, 360276963426448176780588457683, 673898647891252718988643898332, 776097424010530085948773103593, 599464025821904477967452081023, 425285399279902727684391336729, 360276963426448176780588457683, 599464025821904477967452081023, 781514314305620552032662862853, 781514314305620552032662862853, 425285399279902727684391336729, 144511189233912560332097951278, 781514314305620552032662862853, 214924202179524094347733727580, 76157294846705656876769893903, 32164984922050979883061765621, 144511189233912560332097951278, 425285399279902727684391336729, 0, 364474240010461892034904021484, 76157294846705656876769893903, 599464025821904477967452081023, 425285399279902727684391336729, 360276963426448176780588457683, 425285399279902727684391336729, 214924202179524094347733727580, 781514314305620552032662862853]\n"}},"pos":13,"start":1638904969240,"state":"done","type":"cell"}
{"cell_type":"code","end":1638904981035,"exec_count":45,"id":"7f242c","input":"mess=list(map(decode,c))\nprint(mess)","kernel":"sage-9.4","output":{"0":{"name":"stdout","text":"[8, 19, 8, 18, 3, 20, 17, 8, 13, 6, 14, 20, 17, 3, 0, 17, 10, 4, 18, 19, 12, 14, 12, 4, 13, 19, 18, 19, 7, 0, 19, 22, 4, 12, 20, 18, 19, 5, 14, 2, 20, 18, 19, 14, 18, 4, 4, 19, 7, 4, 11, 8, 6, 7, 19, 0, 17, 8, 18, 19, 14, 19, 11, 4]\n"}},"pos":15,"start":1638904981017,"state":"done","type":"cell"}
{"cell_type":"code","end":1638904986919,"exec_count":46,"id":"db20a8","input":"def IntToString(c):\n    return(chr(c+97))","kernel":"sage-9.4","pos":16,"start":1638904986911,"state":"done","type":"cell"}
{"cell_type":"code","end":1638904987520,"exec_count":47,"id":"8e4efb","input":"list(map(IntToString,mess))\n''.join(_)","kernel":"sage-9.4","output":{"0":{"data":{"text/plain":"'itisduringourdarkestmomentsthatwemustfocustoseethelightaristotle'"},"exec_count":47}},"pos":18,"start":1638904987510,"state":"done","type":"cell"}
{"cell_type":"code","end":1638905205761,"exec_count":48,"id":"2ee26c","input":"m=list(map(StringToInt,message))\nprint(m)","kernel":"sage-9.4","output":{"0":{"name":"stdout","text":"[8, 19, 8, 18, 3, 20, 17, 8, 13, 6, 14, 20, 17, 3, 0, 17, 10, 4, 18, 19, 12, 14, 12, 4, 13, 19, 18, 19, 7, 0, 19, 22, 4, 12, 20, 18, 19, 5, 14, 2, 20, 18, 19, 14, 18, 4, 4, 19, 7, 4, 11, 8, 6, 7, 19, 0, 17, 8, 18, 19, 14, 19, 11, 4]\n"}},"pos":10,"start":1638905205747,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":18,"id":"96a587","input":"","kernel":"sage-9.4","pos":4,"state":"done","type":"cell"}
{"cell_type":"code","id":"719e14","input":"","pos":19,"type":"cell"}
{"cell_type":"code","id":"f180f6","input":"","kernel":"sage-9.4","pos":17,"type":"cell"}
{"cell_type":"code","id":"f691f7","input":"","pos":11,"type":"cell"}
{"cell_type":"markdown","exec_count":0,"id":"a3bede","input":"\n# RSA Secret-Sharing Activity\n\nIn this activity, groups of students will set up the RSA keys and practice encoding and decoding messages between groups.\n\n** Be sure your Kernel for this activity is set to **SageMath 9.4**.\n\n### Step 1: Setup\n\n1.   Pick two prime numbers, $p$ and $q$. \n- Keep these secret: $p =$ \\_\\_\\_\\_\\_ $q =$ \\_\\_\\_\\_\\_.\n- Try `random_prime(2^50,lbound=100)` if you need help choosing a prime.\n2.   Find the number $b = \\text{lcm} ((p-1)\\cdot(q-1))$.\n- $b =$ \\_\\_\\_\\_\\_\\_\\_\\_\\_. Keep b secret, too.\n3.   Find the number $n = p\\cdot q$.\n- $n =$ \\_\\_\\_\\_\\_\\_\\_\\_\\_. You will want to\n    publicize $n$.\n4.   Now, pick a public-key exponent $e$, such that $e$ and $n$ are relatively prime.\n- $e =$ \\_\\_\\_\\_\\_\\_\\_\\_\\_.  You will want to publicize $e$.\n5.   Finally, find your secret private-key exponent $d$. To do this, find\n    the number $d$ such that $e\\cdot d\\, (\\text{mod } b) = 1$.\n  - Here we need to do the extended Euclidean algorithm to find integers $u,v$ so that $1=e\\cdot u + b\\cdot v$.\n  - We know how to do this by hand, but SageMath can do it using the `xgcd` command.\n  - The syntax is `xgcd(e,b)` and this will return a triple `(gcd(e,b),u,v)` where $$\\text{gcd}(e,b)=e\\cdot u + b\\cdot v.$$  \n  - Remember that if $u$ is negative, just add $b$ until you get a positive value.  This will be your private key $d$.\n  - $d =$ \\_\\_\\_\\_\\_\\_\\_\\_\\_. Do NOT tell anyone $d$.\n\n****\n\n### Step 2: Secret sharing\n\n1.   Find another team with whom you want to exchange messages, and tell them your modulus $n$ and your public-key exponent $e$. They should also tell you their modulus (call it $n_2$) and their public-key exponent (call it $e_2$). \n- Their key: $n_2$ = \\_\\_\\_\\_\\_\\_\\_, $e_2$ = \\_\\_\\_\\_\\_\\_\\_\\_.\n2.   To send a message, convert it to numbers using the `StringToInt` command along with the `map` and `list` commands.\n\n```\nmessage='hello'\nplaintext=list(map(StringToInt,message))\n```\n\n3. Your message: \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n- Its numerical equivalent: \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n4. For each number $m$ in your `plaintext` variable, calculate $m^{e_2} (\\text{mod } n_2)$. Write a function to do this encoding.  Then, you can map it to the list.  Call the result `ciphertext`.  This is your encoded message.  Note: _You are encoding the message using the other team's public key_.\n```\ndef encode(m,e2,n2):\n  your code here...\n```\n5. Your encrypted message: \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n6.   Then, give your encrypted message to the team from whom you got $n_2,e_2$. They should give you a sequence of numbers as well.\n- Their encrypted message:\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n7.   Now, to decrypt their message, use your secret exponent $d$. For each\n    number $c$ in their message, compute $c^{d} (\\text{mod } n)$. Write a function to do this decoding.  Then, you can map it to the list.  _Note that you are decoding the message using your private key_.\n    This will reveal the numbers in their original message!\n```\ndef decode(c,d,n):\n  your code here...\n```\n8. Use `IntToString` to convert these back to letters to get their message to you.\n9. Their message: \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n\n","pos":0,"type":"cell"}
{"id":"b91885","input":"","pos":20,"type":"cell"}
{"id":"ed4677","input":"","kernel":"sage-9.4","pos":5.5,"type":"cell"}
{"id":0,"time":1638904244407,"type":"user"}
{"last_load":1638904244647,"type":"file"}